# SPDX-FileCopyrightText: Â© 2024 Tenstorrent AI ULC
#
# SPDX-License-Identifier: Apache-2.0
#

if [ -z "$TTMLIR_TOOLCHAIN_DIR" ]; then
  ORANGE='\033[0;33m'
  NC='\033[0m'
  printf "${ORANGE}WARNING: TTMLIR_TOOLCHAIN_DIR not set. Defaulting to /opt/ttmlir-toolchain/ ${NC}\n"
  export TTMLIR_TOOLCHAIN_DIR="/opt/ttmlir-toolchain/"
fi
if command -v sudo > /dev/null 2>&1; then
  sudo apt-get install -y python3.11-dev python3.11-venv
else
  apt-get install -y python3.11-dev python3.11-venv
fi

export TT_TORCH_HOME="$(pwd)"
export LD_LIBRARY_PATH=$TT_TORCH_HOME/env/venv/lib/python3.11/site-packages/torch/lib:$TTMLIR_TOOLCHAIN_DIR/lib:$TT_TORCH_HOME/install/lib/:$LD_LIBRRARY_PATH

export TTMLIR_VENV_DIR="$(pwd)/env/venv"
if [ -d $TTMLIR_VENV_DIR/bin ]; then
  [ -f $TTMLIR_VENV_DIR/bin/activate ] && source $TTMLIR_VENV_DIR/bin/activate
else
  echo "Creating virtual environment in $TTMLIR_VENV_DIR"
  python3.11 -m venv $TTMLIR_VENV_DIR
  source $TTMLIR_VENV_DIR/bin/activate
  pip install --upgrade pip

  python3.11 -m pip install -r requirements.txt

  mkdir -p $TT_TORCH_HOME/dist
  if [ -n "$TTTORCH_DIST_DIR" ]; then
    cp -r -n $TTTORCH_DIST_DIR/* $TT_TORCH_HOME/dist/
  fi

  if [ ! -f $TT_TORCH_HOME/dist/torchvision*.whl ]; then
    cd $TT_TORCH_HOME/third_party
    git clone https://github.com/pytorch/vision.git
    cd vision
    git checkout v0.21.0
    pip uninstall -y torchvision
    TORCHVISION_USE_VIDEO_CODEC=0 TORCHVISION_USE_FFMPEG=0 CC=clang CXX=clang++ _GLIBCXX_USE_CXX11_ABI=1 USE_CUDA=OFF python setup.py bdist_wheel

    cp dist/*.whl $TT_TORCH_HOME/dist
    cd ..
    rm -rf vision
    cd $TT_TORCH_HOME
  fi
  pip install $TT_TORCH_HOME/dist/torchvision*.whl

  pip install stablehlo -f https://github.com/openxla/stablehlo/releases/expanded_assets/v1.0.0
fi
export TTTORCH_ENV_ACTIVATED=1
export TTMLIR_ENV_ACTIVATED=1
export PATH=$TT_TORCH_HOME/third_party/tt-mlir/src/tt-mlir-build/bin:$TT_TORCH_HOME/env/venv/lib/python3.11/site-packages/tt_mlir:$TTMLIR_TOOLCHAIN_DIR/bin:$PATH
export TOKENIZERS_PARALLELISM=false
if [ -n "$PROJECT_ROOT" ]; then
    export TT_METAL_HOME="$PROJECT_ROOT/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal"
else
    export TT_METAL_HOME="$(pwd)/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal"
fi

export PYTHONPATH="$(pwd):$(pwd)/env/venv:$(pwd)/env/venv/lib:$(pwd)/install/lib:$(pwd)/install:$(pwd)/.local/toolchain/python_packages/mlir_core:${TT_METAL_HOME}:${TT_METAL_HOME}/tt_eager:${TT_METAL_BUILD_HOME}/tools/profiler/bin"
export ARCH_NAME="${ARCH_NAME:-wormhole_b0}"
export TT_METAL_LOGGER_LEVEL="ERROR"
