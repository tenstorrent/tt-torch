name: Build

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        build: [
          {runs-on: n150, name: "run"},
        ]

    runs-on:
      - in-service
      - ${{ matrix.build.runs-on }}

    container:
      image: ghcr.io/tenstorrent/tt-torch/tt-torch-ci-ubuntu-22-04:latest
      options: --user root --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
        echo "install-output-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"

    - name: Git safe dir
      run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        create-symlink: true
        key: ${{ matrix.build.runs-on }}

    # Build project
    - name: Configure CMake
      shell: bash
      run: |
        source env/activate
        cmake -G Ninja \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-output-dir }} \
        -B ${{ steps.strings.outputs.build-output-dir }} \
        -S ${{ steps.strings.outputs.work-dir }}

    - name: Build
      shell: bash
      run: |
        source env/activate
        cmake --build ${{ steps.strings.outputs.build-output-dir }}
        cmake --install ${{ steps.strings.outputs.build-output-dir }}

    - name: Copy tt-metal binaries
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: |
        cp ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal-build/lib/*.so lib/
        cp ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir-build/bin/ttmlir-opt lib/

    - name: Copy tt-metal directories
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: |
        mkdir tt-metal
        cp -r ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal/tt_metal tt-metal/
        cp -r ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal/ttnn tt-metal/
        cp -r ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal/runtime tt-metal/

    - name: Copy venv directory
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: |
        mkdir env
        cp -r ${{ steps.strings.outputs.work-dir }}/env env

    - name: 'Tar install directory'
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: tar cvf artifact.tar .

    - name: Upload install folder to archive
      uses: actions/upload-artifact@v4
      with:
        name: install-artifacts
        path: ${{ steps.strings.outputs.install-output-dir }}/artifact.tar
