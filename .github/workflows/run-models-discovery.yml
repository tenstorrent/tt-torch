name: Run Model Discovery Test

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
  workflow_run:
    workflows: [Build]
    types: [completed]

env:
  # Model files accessed via get_file() are cached here.
  DOCKER_CACHE_ROOT: /mnt/dockercache

permissions:
  packages: write
  checks: write

jobs:
  tests:
    timeout-minutes: 340
    strategy:
      fail-fast: false
      matrix:
        runner: [wormhole, blackhole]
        build: [
          { wh-runner: wormhole_b0, bh-runner: p150, name: "grp_1", group: 1 },
          { wh-runner: wormhole_b0, bh-runner: p150, name: "grp_2", group: 2 },
          { wh-runner: wormhole_b0, bh-runner: p150, name: "grp_3", group: 3 },
          { wh-runner: wormhole_b0, bh-runner: p150, name: "grp_4", group: 4 },
          { wh-runner: wormhole_b0, bh-runner: p150, name: "grp_5", group: 5 },
          { wh-runner: wormhole_b0, bh-runner: p150, name: "grp_6", group: 6 },
        ]
    name: "test exec models ${{ matrix.runner == 'wormhole' && 'wh' || matrix.runner == 'blackhole' && 'bh' || 'unk' }} (${{ matrix.build.name }})"
    runs-on: ${{ matrix.runner == 'wormhole' && matrix.build.wh-runner || matrix.runner == 'blackhole' && matrix.build.bh-runner || 'wormhole_b0'}}
    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=2gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    steps:
    - uses: actions/checkout@v4

    - name: Check for runner # Check if we need to skip testing when a wh-runner is not set for wormhole run or a bh-runner on blackhole run
      run: |
        if [ "${{ matrix.runner }}" = "wormhole" ] && [ -n "${{ matrix.build.wh-runner }}" ]; then
          echo "RUN_TEST=wormhole" >> $GITHUB_ENV
        elif [ "${{ matrix.runner }}" = "blackhole" ] && [ -n "${{ matrix.build.bh-runner }}" ]; then
          echo "RUN_TEST=blackhole" >> $GITHUB_ENV
        else
          echo "RUN_TEST=skip" >> $GITHUB_ENV
        fi

    - name: Fetch job id
      id: fetch-job-id
      if: ${{ env.RUN_TEST != 'skip' }}
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "test exec models ${{ matrix.runner == 'wormhole' && 'wh' || matrix.runner == 'blackhole' && 'bh' || 'unk' }} (${{ matrix.build.name }})"

    - name: Set reusable strings
      id: strings
      if: ${{ env.RUN_TEST != 'skip' }}
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "job-id=$JOB_ID" >> "$GITHUB_OUTPUT"
        echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
    - name: Git safe dir
      if: ${{ env.RUN_TEST != 'skip' }}
      run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

    - name: Use build artifacts
      uses: tenstorrent/tt-forge/.github/actions/download-artifact@main
      if: ${{ env.RUN_TEST != 'skip' }}
      with:
        name: install-artifacts
        path: install

    - name: Extract build artifacts
      if: ${{ env.RUN_TEST != 'skip' }}
      shell: bash
      run: |
        cd install
        if [ -f artifact.tar ]; then
          echo "Extracting artifact.tar..."
          tar -xf artifact.tar
          ls -la
        else
          echo "artifact.tar not found, listing contents:"
          ls -la
        fi

    - name: install tt-torch
      if: ${{ env.RUN_TEST != 'skip' }}
      shell: bash
      run: |
        source env/activate
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv install/wheels/* ${{ steps.strings.outputs.dist-dir }}
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Run Model Test
      if: ${{ env.RUN_TEST != 'skip' }}
      env:
        HF_HOME: ${{ env.DOCKER_CACHE_ROOT }}/huggingface
        TORCH_HOME: ${{ env.DOCKER_CACHE_ROOT }}/torch
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      shell: bash
      run: |
        source env/activate
        pytest --forked --durations=0 -v -rA tests/runner/test_models.py -m expected_passing \
        --splits 6 --group ${{ matrix.build.group }} --splitting-algorithm least_duration --durations-path .test_durations \
        --junit-xml=${{ steps.strings.outputs.test_report_path_models }} | tee pytest.log

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: ${{ (success() || failure()) && env.RUN_TEST != 'skip' }}
      with:
        name: test-log-${{ matrix.runner }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: pytest.log

    - name: Upload Test Report Models
      uses: actions/upload-artifact@v4
      if: ${{ (success() || failure()) && env.RUN_TEST != 'skip' }}
      with:
        name: test-reports-models-${{ matrix.runner }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_models }}
