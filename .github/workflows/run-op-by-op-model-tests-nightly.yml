name: Run Op-By-Op Model Tests (Nightly)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
  workflow_run:
    workflows: [Build]
    types: [completed]

env:
  DOCKER_CACHE_ROOT: /mnt/dockercache

jobs:
  tests:
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        build: [
          {
            runs-on: wormhole_b0, name: "qwen", tests: "
              tests/models/Qwen/test_qwen2_token_classification.py::test_qwen2_token_classification[op_by_op_torch-Qwen/Qwen2-7B-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "autoencoder", tests: "
              tests/models/autoencoder_conv/test_autoencoder_conv.py::test_autoencoder_conv[op_by_op_torch-eval]
              tests/models/autoencoder_conv/test_autoencoder_conv_v2.py::test_autoencoder_conv_v2[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "falcon", tests: "
              tests/models/falcon/test_falcon.py::test_falcon[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "gpt", tests: "
              tests/models/gpt_neo/test_gpt_neo.py::test_gpt_neo[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "llama", tests: "
              tests/models/llama/test_llama_7b.py::test_llama_7b[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "mobilenet", tests: "
              tests/models/MobileNetV2/test_MobileNetV2_onnx.py::test_MobileNetV2_onnx[op_by_op_stablehlo-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "openpose", tests: "
              tests/models/openpose/test_openpose.py::test_openpose[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "stable-diffusion-pipe", tests: "
              tests/models/stable_diffusion/test_stable_diffusion.py::test_stable_diffusion[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "t5", tests: "
              tests/models/t5/test_t5.py::test_t5[op_by_op_torch-t5-large-eval]
              tests/models/speecht5_tts/test_speecht5_tts.py::test_speecht5_tts[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "unet", tests: "
              tests/models/unet/test_unet.py::test_unet[op_by_op_torch-eval]
              tests/models/unet_brain/test_unet_brain.py::test_unet_brain[op_by_op_torch-eval]
              tests/models/unet_carvana/test_unet_carvana.py::test_unet_carvana[op_by_op_torch-eval]
              tests/models/vgg19_unet/test_vgg19_unet.py::test_vgg19_unet[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "RMBG", tests: "
              tests/models/RMBG/test_RMBG.py::test_RMBG[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "timm", tests: "
              tests/models/timm/test_timm_image_classification.py::test_timm_image_classification_generality[op_by_op_torch-eval-ghostnetv2_100.in1k]
              tests/models/timm/test_timm_image_classification.py::test_timm_image_classification_generality[op_by_op_torch-eval-inception_v4.tf_in1k]
              tests/models/vovnet/test_vovnet_onnx.py::test_vovnet_onnx[op_by_op_stablehlo-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "vision-misc", tests: "
              tests/models/glpn_kitti/test_glpn_kitti.py::test_glpn_kitti[op_by_op_torch-eval]
              tests/models/hand_landmark/test_hand_landmark.py::test_hand_landmark[op_by_op_torch-eval]
              tests/models/segment_anything/test_segment_anything.py::test_segment_anything[op_by_op_torch-eval]
              tests/models/vilt/test_vilt.py::test_vilt[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "codegen", tests: "
              tests/models/codegen/test_codegen.py::test_codegen[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "torchvision_1", tests: "
              tests/models/torchvision/test_torchvision_image_classification.py::test_torchvision_image_classification_generality[op_by_op_torch-eval-googlenet]
              "
          },
          {
            runs-on: wormhole_b0, name: "deepseek", tests: "
              tests/models/deepseek/test_deepseek.py::test_deepseek[op_by_op_torch-deepseek-ai/DeepSeek-V3-eval]
              tests/models/deepseek/test_deepseek_qwen.py::test_deepseek_qwen[op_by_op_torch-deepseek-ai/DeepSeek-R1-Distill-Qwen-32B-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "phi", tests: "
              tests/models/phi/test_phi_1_1p5_2.py::test_phi[op_by_op_torch-microsoft/phi-2-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "bi_lstm_crf", tests: "
              tests/models/bi_lstm_crf/test_bi_lstm_crf.py::test_bi_lstm_crf[op_by_op_torch-eval-lstm]
              tests/models/bi_lstm_crf/test_bi_lstm_crf.py::test_bi_lstm_crf[op_by_op_torch-eval-gru]
              "
          },
          {
            runs-on: wormhole_b0, name: "gliner", tests: "
              tests/models/gliner/test_gliner.py::test_gliner[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "YOLOv10", tests: "
              tests/models/yolov10/test_yolov10.py::test_yolov10[op_by_op_torch-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "OFT", tests: "
              tests/models/oft/test_oft.py::test_oft[op_by_op_torch-eval]
              "
          },
          {

            runs-on: wormhole_b0, name: "mistral", tests: "
              tests/models/mistral/test_mistral.py::test_mistral[op_by_op_torch-mistral7b-eval]
              tests/models/mistral/test_mistral.py::test_mistral[op_by_op_torch-ministral8b-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "pixtral", tests: "
              tests/models/mistral/test_pixtral.py::test_pixtral[op_by_op_torch-eval]
            "
          },
          {
            runs-on: wormhole_b0, name: "falcon3", tests: "
              tests/models/falcon/test_falcon3.py::test_falcon[op_by_op_torch-tiiuae/Falcon3-3B-Base-eval]
              tests/models/falcon/test_falcon3.py::test_falcon[op_by_op_torch-tiiuae/Falcon3-7B-Base-eval]
              tests/models/falcon/test_falcon3.py::test_falcon[op_by_op_torch-tiiuae/Falcon3-10B-Base-eval]
              "
          },
          {
            runs-on: wormhole_b0, name: "Flux", tests: "
              tests/models/flux/test_flux.py::test_flux[op_by_op_torch-flux_schnell-eval]
              tests/models/flux/test_flux.py::test_flux[op_by_op_torch-flux_dev-eval]
              "
          }
        ]
    runs-on:
      - ${{ matrix.build.runs-on }}

    name: "tests (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"

    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=4gb --pid=host
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Fetch job id
      id: fetch-job-id
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "tests (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})" # reference above tests.name

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "test-output-dir=$(pwd)/results/models/tests/" >> "$GITHUB_OUTPUT"

    - name: Sample memory
      shell: bash
      run: |
        echo "Memory sample at $(date)"
        ps -aux --sort -%mem | head -n 10

    - name: Git safe dir
      run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

    - name: Use build artifacts
      uses: actions/download-artifact@v4
      with:
        name: install-artifacts
        path: ${{ steps.strings.outputs.install-dir }}

    - name: 'Untar install directory'
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-dir }}
      run: |
        tar xvf artifact.tar
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv wheels/* ${{ steps.strings.outputs.dist-dir }}

    - name: install tt-torch
      shell: bash
      run: |
        source env/activate
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Run Model Tests
      env:
        HF_HOME: ${{ env.DOCKER_CACHE_ROOT }}/huggingface
        TORCH_HOME: ${{ env.DOCKER_CACHE_ROOT }}/torch
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      shell: bash
      run: |
        source env/activate

        # Make sure we don't stop on first failure
        set +e

        tests_list=$(echo "${{ matrix.build.tests }}" | xargs -n1 echo)
        total_tests=$(echo "$tests_list" | wc -l)

        failures=0
        counter=0
        rm -f pytest.log

        for test_case in $tests_list; do
          counter=$((counter + 1))

          echo "====== BEGIN LOG: $test_case ======" >> pytest.log
          pytest -svv "$test_case" >> pytest.log 2>&1
          exit_code=$?

          echo "====== END LOG: $test_case ========" >> pytest.log
          echo >> pytest.log

          if [ $exit_code -eq 0 ]; then
            echo "[ $counter / $total_tests ] $test_case PASSED"
          else
            echo "[ $counter / $total_tests ] $test_case FAILED"
            failures=$((failures + 1))
          fi
        done

        cp pytest.log full_job_output.log

        # If any test failed, exit nonzero to mark the job as failed
        if [ $failures -ne 0 ]; then
          echo "Total failures: $failures"
          exit 1
        fi

    - name: Tar results
      if: success() || failure()
      shell: bash
      run: |
        TEST_DIR="${{ steps.strings.outputs.test-output-dir }}"
        OUTPUT_TAR="${{ matrix.build.name }}_${{ steps.fetch-job-id.outputs.job_id }}.tar"

        if [ ! -d "$TEST_DIR" ]; then
          echo "WARNING: Test output dir '$TEST_DIR' does not exist. Please check if test ran properly. Skipping tar."
        else
          cd "$TEST_DIR"
          tar cvf "$OUTPUT_TAR" .
        fi

    - name: Upload test folder to archive
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-nightly-${{ matrix.build.name }}.tar
        path: ${{ steps.strings.outputs.test-output-dir }}/${{ matrix.build.name }}_${{ steps.fetch-job-id.outputs.job_id }}.tar

    - name: Upload full logs
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: full-logs-nightly-${{ matrix.build.name }}
        path: full_job_output.log

    - name: Upload logs for bisect
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-log-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: pytest.log
