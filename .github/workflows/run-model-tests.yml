name: Run Model Tests

on:
  workflow_dispatch:
  workflow_call:
  workflow_run:
    workflows: [Build]
    types: [completed]

jobs:
  tests:
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        build: [
          {runs-on: n150, name: "run1", test_names: "stable_diffusion, Qwen, MobileNetV2, clip, flan_t5, mlpmixer, resnet, vilt, albert, codegen, glpn_kitti, mnist, resnet50, RMBG, unet_carvana, mgp-str-base, musicgen_small, segformer, torchvision, yolos"},
          {runs-on: n150, name: "run2", test_names: "t5, whisper, autoencoder_conv, deit, gpt2, mobilenet_ssd, roberta, timm, xglm, autoencoder_linear, detr, beit, distilbert, hand_landmark, openpose, segment_anything, unet, yolov3, bert, dpr, hardnet, opt, speecht5_tts, unet_brain, yolov5, bloom, falcon, llama, perceiver_io, squeeze_bert, gpt_neo"},
        ]
    runs-on:
      - ${{ matrix.build.runs-on }}

    container:
      image: ghcr.io/tenstorrent/tt-torch/tt-torch-ci-ubuntu-22-04:latest
      options: --user root --device /dev/tenstorrent/0 --shm-size=2gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        job-name: "${{ github.job }} (${{ matrix.build.runs-on }}, ${{ matrix.build.name }}"
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
        echo "install-output-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "test-output-dir=$(pwd)/results/models/tests/" >> "$GITHUB_OUTPUT"
        # Github job context unfortunately doesn't contain job_id, this is the workaround how to fetch it using GH API
        echo "Expected job name: ${{ env.job-name }}"
        JOB_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs" | \
          jq -r '.jobs[] | select(.name | contains("${{ env.job-name }}")) | .id ')
        echo "Current job id: $JOB_ID"
        echo "job-id=$JOB_ID" >> "$GITHUB_OUTPUT"

    - name: Git safe dir
      run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

    - name: Use build artifacts
      uses: actions/download-artifact@v4
      with:
        name: install-artifacts
        path: ${{ steps.strings.outputs.install-output-dir }}

    - name: 'Untar install directory'
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: tar xvf artifact.tar

    - name: make directories
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: |
        mkdir -p ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal
        mkdir -p ${{ steps.strings.outputs.work-dir }}/env

    - name: copy tt-metal and env dirs
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-output-dir }}
      run: |
        cp -r ${{ steps.strings.outputs.install-output-dir }}/tt-metal/* ${{ steps.strings.outputs.work-dir }}/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal
        cp -r ${{ steps.strings.outputs.install-output-dir }}/env/env/* ${{ steps.strings.outputs.work-dir }}/env

    - name: Run Model Tests
      shell: bash
      run: |
        echo ${{ steps.strings.outputs.work-dir }}
        echo ${{ steps.strings.outputs.test-output-dir }}
        echo ${{ steps.strings.outputs.build-output-dir }}
        echo ${{ steps.strings.outputs.install-output-dir }}
        source env/activate
        export LD_LIBRARY_PATH="/opt/ttmlir-toolchain/lib/:${{ steps.strings.outputs.install-output-dir }}/lib:${{ steps.strings.outputs.build-output-dir }}/lib:./lib/:${LD_LIBRARY_PATH}"
        for testname in ${{ matrix.build.test_names }}; do
        testname=${testname//,/}
        echo "running test: $testname"
        pytest -svv tests/models/$testname --nightly
        done

    - name: Tar results
      if: success() || failure()
      shell: bash
      working-directory: ${{ steps.strings.outputs.test-output-dir }}
      run: |
        tar cvf ${{ matrix.build.name }}_${{ steps.strings.outputs.job-id }}.tar .

    - name: Upload test folder to archive
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.build.name }}.tar
        path: ${{ steps.strings.outputs.test-output-dir }}/${{ matrix.build.name }}_${{ steps.strings.outputs.job-id }}.tar
