
name: Build and Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir or branch name'
        required: false
        type: string
  workflow_call:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir or branch name'
        required: false
        type: string
    outputs:
      docker-image:
        description: "Built docker image name"
        value: ${{ jobs.build-image.outputs.docker-image }}
      docker-image-harbor:
        description: "Built docker image name"
        value: ${{ jobs.build-image.outputs.docker-image-harbor }}

permissions:
  packages: write
  checks: write

jobs:

  build-image:
    runs-on: builder
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
      docker-image-harbor: ${{ steps.build.outputs.docker-image-harbor }}
    steps:
      - name: Fix permissions
        shell: bash
        run: |
          sudo chmod 777 -R $GITHUB_WORKSPACE
          sudo chown ubuntu:ubuntu -R $(pwd)
          git config --global --add safe.directory $(pwd)

      - uses: actions/checkout@v4
        with:
            fetch-depth: 0 # Fetch all history and tags

      - name: Override tt-mlir SHA mlir_override is set
        if: ${{ inputs.mlir_override }}
        shell: bash
        run: |
            # Update the CMakeLists.txt file with the new SHA
            sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build Docker images and output the image name
        id: build
        shell: bash
        run: |
          # Output the image name
          set pipefail
          .github/build-docker-images.sh | tee docker.log
          DOCKER_CI_IMAGE=$(tail -n 1 docker.log)
          echo "DOCKER_CI_IMAGE $DOCKER_CI_IMAGE"
          echo "docker-image=$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"

  set-latest:
    # Set the latest tag on the CI image
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - name: Set latest tag on the image
        run: |
          DOCKER_CI_IMAGE=${{ needs.build-image.outputs.docker-image }}
          DOCKER_TAG=$(echo $DOCKER_CI_IMAGE | sed 's/^.*://')
          IMAGE_NAME=$(echo $DOCKER_CI_IMAGE | sed 's/:.*//')
          echo "Setting latest tag on the image $IMAGE_NAME:$DOCKER_TAG"
          skopeo copy "docker://$IMAGE_NAME:$DOCKER_TAG" "docker://$IMAGE_NAME:latest"
          echo "docker-image-harbor=harbor.ci.tenstorrent.net/$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"
