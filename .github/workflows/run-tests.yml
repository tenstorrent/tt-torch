name: Run Tests

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
  workflow_run:
    workflows: [Build]
    types: [completed]

permissions:
  packages: write
  checks: write
  pull-requests: write # only required if `comment: true` was enabled

jobs:
  tests:
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        build: [
          {runs-on: wormhole_b0, name: "run"},
        ]

    runs-on:
      - ${{ matrix.build.runs-on }}

    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=2gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Fetch job id
      id: fetch-job-id
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "${{ github.job }} (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "job-id=$JOB_ID" >> "$GITHUB_OUTPUT"
        echo "test_report_path_torch=report_torch_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
        echo "test_report_path_mnist=report_mnist_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
        echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
        echo "test_report_path_onnx=report_onnx_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

    - name: Git safe dir
      run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

    - name: Use build artifacts
      uses: actions/download-artifact@v4
      with:
        name: install-artifacts
        path: ${{ steps.strings.outputs.install-dir }}

    - name: 'Untar install directory'
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-dir }}
      run: |
        tar xvf artifact.tar
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv wheels/* ${{ steps.strings.outputs.dist-dir }}

    - name: install tt-torch
      shell: bash
      run: |
        source env/activate
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Verify CI model test matrices
      shell: bash
      run: |
        source env/activate
        python tt_torch/tools/ci_verification.py --scan-workflows

    - name: Run PyTorch Unit tests
      shell: bash
      run: |
        source env/activate
        pytest -v tests/torch \
           --junit-xml=${{ steps.strings.outputs.test_report_path_torch }} \
           --cov=tt_torch --cov-report term --cov-report xml:coverage.xml

    - name: Upload Test Report Torch
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-torch-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_torch }}

    - name: Run ONNX Unit tests
      shell: bash
      run: |
        source env/activate
        pytest -v tests/onnx \
            --junit-xml=${{ steps.strings.outputs.test_report_path_onnx }} \
            --cov=tt_torch --cov-report term --cov-report xml:coverage.xml --cov-append

    - name: Upload Test Report Onnx
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-onnx-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_onnx }}

    - name: Run Mnist Op-By-Op and Check All Ops Execute
      shell: bash
      run: |
        source env/activate
        TT_TORCH_CHECK_ALL_OPS_RUN=1 pytest -svv tests/models/mnist/test_mnist.py --op_by_op_torch \
            --junit-xml=${{ steps.strings.outputs.test_report_path_mnist }} \
            --cov=tt_torch --cov-report term --cov-report xml:coverage.xml --cov-append

    - name: Upload Test Report Mnist
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-mnist-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_mnist }}


    - name: Show Test Report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: ${{ steps.strings.outputs.test_report_path_torch }}
        check_name: TT-Torch Tests
        comment: true
        updateComment: false
        detailed_summary: true
        group_suite: true

    - name: Upload coverage reports to Codecov
      if: success() || failure()
      continue-on-error: true
      uses: codecov/codecov-action@v5
      with:
        files: coverage.info,.coverage,coverage.xml
        # disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results to Codecov
      if: success() || failure()
      continue-on-error: true
      uses: codecov/test-results-action@v1
      with:
        files: ${{ steps.strings.outputs.test_report_path_torch }}, ${{ steps.strings.outputs.test_report_path_onnx }}, ${{ steps.strings.outputs.test_report_path_mnist }}
        disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}
