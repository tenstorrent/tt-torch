name: Run Full Model Execution Tests (Nightly)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      run-codecov:
        description: 'Run code coverage reports'
        required: false
        type: string # properly a boolean but autocast to string when passed in using 'with' inputs
        default: 'true'
      run-dump-mlir:
        description: 'Dump MLIR files'
        required: false
        type: string
        default: 'true'
      force-legacy-backend:
        description: 'Force legacy backend'
        required: false
        type: boolean
        default: false
  workflow_run:
    workflows: [Build] # backref to run-build as dependency
    types: [completed]

env:
  DOCKER_CACHE_ROOT: /mnt/dockercache

permissions:
  packages: write
  checks: write

jobs:
  tests:
    timeout-minutes: 340
    strategy:
      fail-fast: false
      matrix:
        runner: [wormhole]
        build: [
          {
            # Approximately 70 minutes.
            wh-runner: wormhole_b0, bh-runner: p150, name: "eval_1", tests: "
                  tests/models/musicgen_small/test_musicgen_small.py::test_musicgen_small[single_device-full-eval]
                  tests/models/bert/test_bert_turkish.py::test_bert_turkish[single_device-full-eval]
                  tests/models/torchvision/test_torchvision_image_classification.py::test_torchvision_image_classification[single_device-full-eval-vgg19]
                  tests/models/timm/test_timm_image_classification.py::test_timm_image_classification[single_device-full-eval-tf_efficientnet_lite0.in1k]
                  tests/models/timm/test_timm_image_classification.py::test_timm_image_classification[single_device-full-eval-tf_efficientnet_lite4.in1k]
                  tests/models/segformer/test_segformer.py::test_segformer[single_device-full-eval]
            "
          },
        ]
    runs-on: ${{ matrix.runner == 'wormhole' && matrix.build.wh-runner || matrix.runner == 'blackhole' && matrix.build.bh-runner  || 'wormhole_b0'}}
    name: "test exec nightly ${{ matrix.runner == 'wormhole' && 'wh' || matrix.runner == 'blackhole' && 'bh' || 'unk' }} (${{ matrix.build.name }})"

    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=4gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache
    steps:
    - uses: actions/checkout@v4

    - name: Check for runner # Check if we need to skip testing when a wh-runner is not set for wormhole run or a bh-runner on blackhole run
      run: |
        if [ "${{ matrix.runner }}" = "wormhole" ] && [ -n "${{ matrix.build.wh-runner }}" ]; then
          echo "RUN_TEST=wormhole" >> $GITHUB_ENV
        elif [ "${{ matrix.runner }}" = "blackhole" ] && [ -n "${{ matrix.build.bh-runner }}" ]; then
          echo "RUN_TEST=blackhole" >> $GITHUB_ENV
        else
          echo "RUN_TEST=skip" >> $GITHUB_ENV
        fi

    - name: Fetch job id
      id: fetch-job-id
      if: ${{ env.RUN_TEST != 'skip' }}
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "test exec nightly ${{ matrix.runner == 'wormhole' && 'wh' || matrix.runner == 'blackhole' && 'bh' || 'unk' }} (${{ matrix.build.name }})" # reference above tests.name

    - name: Set reusable strings
      id: strings
      if: ${{ env.RUN_TEST != 'skip' }}
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}

      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
        echo "mlir_dir=$(pwd)/model_mlir" >> "$GITHUB_OUTPUT" # Define the model_mlir directory

    - name: Use build artifacts
      uses: tenstorrent/tt-forge/.github/actions/download-artifact@main
      if: ${{ env.RUN_TEST != 'skip' }}
      with:
        name: install-artifacts
        path: install

    - name: install tt-torch
      if: ${{ env.RUN_TEST != 'skip' }}
      shell: bash
      run: |
        source env/activate
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv install/wheels/* ${{ steps.strings.outputs.dist-dir }}
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Run Full Model Execution Tests
      if: ${{ env.RUN_TEST != 'skip' }}
      env:
        HF_HOME: ${{ env.DOCKER_CACHE_ROOT }}/huggingface
        TORCH_HOME: ${{ env.DOCKER_CACHE_ROOT }}/torch
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        TT_TORCH_FORCE_LEGACY_BACKEND: ${{ inputs.force-legacy-backend && '1' || '0' }}
      shell: bash
      run: |
        source env/activate

        TT_TORCH_SAVE_MLIR=STABLEHLO,TTIR,TTNN pytest --forked --durations=0 -v -rf ${{matrix.build.tests}} \
           --junit-xml=${{ steps.strings.outputs.test_report_path_models }} \
           --cov=tt_torch --cov-report term --cov-report xml:coverage.xml --cov-append | tee pytest.log

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: ${{ (success() || failure()) && env.RUN_TEST != 'skip' }}
      with:
        name: test-log-${{ matrix.runner }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: pytest.log

    - name: Upload Test Report Models
      uses: actions/upload-artifact@v4
      if: ${{ (success() || failure()) && env.RUN_TEST != 'skip' }}
      with:
        name: test-reports-models-${{ matrix.runner }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_models }}

    - name: Upload coverage reports to Codecov
      if: ${{ (success() || failure()) && inputs.run-codecov == 'true' && env.RUN_TEST != 'skip' }}
      continue-on-error: true
      uses: codecov/codecov-action@v5
      with:
        files: coverage.info,.coverage,coverage.xml
        # disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results to Codecov
      if: ${{ (success() || failure()) && inputs.run-codecov == 'true' && env.RUN_TEST != 'skip' }}
      continue-on-error: true
      uses: codecov/test-results-action@v1
      with:
        files: ${{ steps.strings.outputs.test_report_path_models }}
        disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload MLIR files
      uses: actions/upload-artifact@v4
      if: ${{ (success() || failure()) && inputs.run-dump-mlir == 'true' && env.RUN_TEST != 'skip' }}
      with:
        name: model-mlir-execute-nightly-${{ matrix.runner }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.mlir_dir }}

  merge_mlir_artifacts:
    needs: [tests]
    if: ${{ always() && inputs.run-dump-mlir == 'true' }}  # Runs always if MLIR dump is enabled
    runs-on: ubuntu-latest
    name: Merge MLIR Artifacts
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: model-mlir-execute-nightly
          pattern: model-mlir-execute-nightly-*
          delete-merged: true
