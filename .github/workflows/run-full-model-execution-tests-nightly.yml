name: Run Full Model Execution Tests (Nightly)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      run-codecov:
        description: 'Run code coverage reports'
        required: false
        type: string # properly a boolean but autocast to string when passed in using 'with' inputs
        default: 'true'
      run-dump-mlir:
        description: 'Dump MLIR files'
        required: false
        type: string
        default: 'true'
  workflow_run:
    workflows: [Build] # backref to run-build as dependency
    types: [completed]

env:
  DOCKER_CACHE_ROOT: /mnt/dockercache

permissions:
  packages: write
  checks: write

jobs:
  tests:
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        build: [
          # This test group needs to be moved. This will be done once multichip tests are refactored: #780
          {
            runs-on: n300, name: "eval_10_batch_parallel", tests: "
                tests/models/stable_diffusion/test_stable_diffusion_unet_n300.py::test_stable_diffusion_unet[full-eval]
                tests/models/unet/test_unet_n300.py::test_unet[full-eval]
                tests/models/unet_brain/test_unet_brain_n300.py::test_unet_brain[full-eval]
                tests/models/unet_carvana/test_unet_carvana_n300.py::test_unet_carvana[full-eval]
                tests/models/yolos/test_yolos_n300.py::test_yolos[full-eval]
                tests/models/yolov3/test_yolov3_n300.py::test_yolov3[full-eval]
                tests/models/albert/test_albert_question_answering_n300.py::test_albert_question_answering[full-twmkn9/albert-base-v2-squad2-eval]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-densenet121]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-densenet161]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-densenet169]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-densenet201]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-mobilenet_v2]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-mobilenet_v3_small]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-mobilenet_v3_large]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_400mf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_800mf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_1_6gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_3_2gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_8gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_16gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_y_32gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_400mf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_800mf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_1_6gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_3_2gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_8gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_16gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-regnet_x_32gf]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnet18]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnet34]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnet50]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnet101]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnet152]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnext50_32x4d]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnext101_32x8d]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-resnext101_64x4d]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg11]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg11_bn]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg13]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg13_bn]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg16]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg16_bn]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg19]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vgg19_bn]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-vit_b_16]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-wide_resnet50_2]
                tests/models/torchvision/test_torchvision_image_classification_n300.py::test_torchvision_image_classification[full-eval-wide_resnet101_2]
            "
          },
          # This test group needs to be moved. This will be done once multichip tests are refactored: #780
          {
            runs-on: n300, name: "eval_11_batch_parallel", tests: "
                tests/models/timm/test_timm_image_classification_n300.py::test_timm_image_classification[full-eval-dla34.in1k]
                tests/models/timm/test_timm_image_classification_n300.py::test_timm_image_classification[full-eval-ghostnet_100.in1k]
                tests/models/timm/test_timm_image_classification_n300.py::test_timm_image_classification[full-eval-hrnet_w18.ms_aug_in1k]
                tests/models/timm/test_timm_image_classification_n300.py::test_timm_image_classification[full-eval-tf_efficientnet_lite4.in1k]
                tests/models/deit/test_deit_n300.py::test_deit[full-facebook/deit-base-patch16-224-eval]
                tests/models/beit/test_beit_image_classification_n300.py::test_beit_image_classification[full-microsoft/beit-base-patch16-224-eval]
                tests/models/beit/test_beit_image_classification_n300.py::test_beit_image_classification[full-microsoft/beit-large-patch16-224-eval]
                tests/models/mgp-str-base/test_mgp_str_base_n300.py::test_mgp_str_base[full-eval]
                tests/models/mlpmixer/test_mlpmixer_n300.py::test_mlpmixer[full-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b1-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b2-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b3-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b4-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b5-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b6-eval]
                tests/models/EfficientNet/test_EfficientNet_n300.py::test_EfficientNet[full-efficientnet-b7-eval]
            "
          },
        ]
    runs-on:
      - ${{ matrix.build.runs-on }}

    name: "test execution_nightly (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"

    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=4gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache
    steps:
    - uses: actions/checkout@v4

    - name: Fetch job id
      id: fetch-job-id
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "test execution_nightly (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})" # reference above tests.name

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}

      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
        echo "mlir_dir=$(pwd)/model_mlir" >> "$GITHUB_OUTPUT" # Define the model_mlir directory

    - name: Use build artifacts
      uses: tenstorrent/tt-forge/.github/actions/download-artifact@main
      with:
        name: install-artifacts
        path: install

    - name: install tt-torch
      shell: bash
      run: |
        source env/activate
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv install/wheels/* ${{ steps.strings.outputs.dist-dir }}
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Run Full Model Execution Tests
      env:
        HF_HOME: ${{ env.DOCKER_CACHE_ROOT }}/huggingface
        TORCH_HOME: ${{ env.DOCKER_CACHE_ROOT }}/torch
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      shell: bash
      run: |
        source env/activate

        TT_TORCH_SAVE_MLIR=STABLEHLO,TTIR,TTNN pytest --durations=0 -v -rf ${{matrix.build.tests}} \
           --junit-xml=${{ steps.strings.outputs.test_report_path_models }} \
           --cov=tt_torch --cov-report term --cov-report xml:coverage.xml --cov-append | tee pytest.log

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-log-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: pytest.log

    - name: Upload Test Report Models
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-models-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_models }}

    - name: Upload coverage reports to Codecov
      if: ${{ (success() || failure()) && inputs.run-codecov == 'true' }}
      continue-on-error: true
      uses: codecov/codecov-action@v5
      with:
        files: coverage.info,.coverage,coverage.xml
        # disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results to Codecov
      if: ${{ (success() || failure()) && inputs.run-codecov == 'true' }}
      continue-on-error: true
      uses: codecov/test-results-action@v1
      with:
        files: ${{ steps.strings.outputs.test_report_path_models }}
        disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload MLIR files
      uses: actions/upload-artifact@v4
      if: ${{ (success() || failure()) && inputs.run-dump-mlir == 'true' }}
      with:
        name: model-mlir-execute-nightly-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.mlir_dir }}

  merge_mlir_artifacts:
    needs: [tests]
    if: ${{ always() && inputs.run-dump-mlir == 'true' }}  # Runs always if MLIR dump is enabled
    runs-on: ubuntu-latest
    name: Merge MLIR Artifacts
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: model-mlir-execute-nightly
          pattern: model-mlir-execute-nightly-*
          delete-merged: true
