name: Run Full Model Execution Tests (Nightly)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      run-codecov:
        description: 'Run code coverage reports'
        required: false
        type: string # properly a boolean but autocast to string when passed in using 'with' inputs
        default: 'true'
  workflow_run:
    workflows: [Build] # backref to run-build as dependency
    types: [completed]

env:
  DOCKER_CACHE_ROOT: /mnt/dockercache

jobs:
  tests:
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        build: [
          {
            # These are WIP model_group=red models, marked w/ pytest.skip with reasons, run here for reporting.
            runs-on: wormhole_b0, name: "skip_tests_red_models", tests: "
                tests/models/bi_lstm_crf/test_bi_lstm_crf.py::test_bi_lstm_crf[full-eval-lstm]
                tests/models/bi_lstm_crf/test_bi_lstm_crf.py::test_bi_lstm_crf[full-eval-gru]
                tests/models/oft/test_oft.py::test_oft[full-eval]
                tests/models/vgg19_unet/test_vgg19_unet.py::test_vgg19_unet[full-eval]
                tests/models/yolov10/test_yolov10.py::test_yolov10[full-eval]
                tests/models/flux/test_flux.py::test_flux[full-flux_schnell-eval]
                tests/models/flux/test_flux.py::test_flux[full-flux_dev-eval]
                tests/models/gliner/test_gliner.py::test_gliner[full-eval]
                tests/models/phi/test_phi_1_1p5_2.py::test_phi[full-microsoft/phi-2-eval]
                tests/models/mistral/test_pixtral.py::test_pixtral[full-eval]
                tests/models/mistral/test_mistral.py::test_mistral[full-mistral7b-eval]
                tests/models/mistral/test_mistral.py::test_mistral[full-ministral8b-eval]
                tests/models/falcon/test_falcon3.py::test_falcon[full-tiiuae/Falcon3-3B-Base-eval]
                tests/models/falcon/test_falcon3.py::test_falcon[full-tiiuae/Falcon3-7B-Base-eval]
                tests/models/falcon/test_falcon3.py::test_falcon[full-tiiuae/Falcon3-10B-Base-eval]
                tests/models/vovnet/test_vovnet_onnx.py::test_vovnet_onnx[full-eval]
            "
          },
        ]
    runs-on:
      - ${{ matrix.build.runs-on }}

    name: "test execution_nightly (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"

    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=4gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Fetch job id
      id: fetch-job-id
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "test execution_nightly (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})" # reference above tests.name

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}

      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

    - name: Use build artifacts
      uses: actions/download-artifact@v4
      with:
        name: install-artifacts
        path: ${{ steps.strings.outputs.install-dir }}

    - name: 'Untar install directory'
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-dir }}
      run: |
        tar xvf artifact.tar
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv wheels/* ${{ steps.strings.outputs.dist-dir }}

    - name: install tt-torch
      shell: bash
      run: |
        source env/activate
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Run Full Model Execution Tests
      env:
        HF_HOME: ${{ env.DOCKER_CACHE_ROOT }}/huggingface
        TORCH_HOME: ${{ env.DOCKER_CACHE_ROOT }}/torch
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      shell: bash
      run: |
        source env/activate

        pytest --durations=0 -v -rf ${{matrix.build.tests}} \
           --junit-xml=${{ steps.strings.outputs.test_report_path_models }} \
           --cov=tt_torch --cov-report term --cov-report xml:coverage.xml --cov-append | tee pytest.log

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-log-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: pytest.log

    - name: Upload Test Report Models
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-models-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_models }}

    - name: Upload coverage reports to Codecov
      if: ${{ (success() || failure()) && inputs.run-codecov == 'true' }}
      continue-on-error: true
      uses: codecov/codecov-action@v5
      with:
        files: coverage.info,.coverage,coverage.xml
        # disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results to Codecov
      if: ${{ (success() || failure()) && inputs.run-codecov == 'true' }}
      continue-on-error: true
      uses: codecov/test-results-action@v1
      with:
        files: ${{ steps.strings.outputs.test_report_path_models }}
        disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}
